var m=Object.defineProperty;var v=(w,t,i)=>t in w?m(w,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):w[t]=i;var n=(w,t,i)=>v(w,typeof t!="symbol"?t+"":t,i);class R{constructor(){n(this,"device");n(this,"server");n(this,"txCharacteristic");n(this,"rxCharacteristic");n(this,"SERVICE_UUID","7a230001-5475-a6a4-654c-8431f6ad49c4");n(this,"TX_CHARACTERISTIC_UUID","7a230002-5475-a6a4-654c-8431f6ad49c4");n(this,"RX_CHARACTERISTIC_UUID","7a230003-5475-a6a4-654c-8431f6ad49c4");n(this,"maxPayload",60);n(this,"awaitingPrintResponse",!1);n(this,"awaitingDataResponse",!1);n(this,"printTimeoutId");n(this,"printResponsePromise");n(this,"printResolve");n(this,"dataResponsePromise");n(this,"dataResolve");n(this,"onDataResponse");n(this,"onPrintResponse");n(this,"onDisconnectHandler");n(this,"handleDisconnect",()=>{this.device=void 0,this.server=void 0,this.txCharacteristic=void 0,this.rxCharacteristic=void 0,this.onDisconnectHandler&&this.onDisconnectHandler()});n(this,"notificationHandler",t=>{const e=t.target.value;if(!(!e||e.buffer.byteLength===0))if(e.byteLength>0&&e.getUint8(0)===1){const o=new Uint8Array(e.buffer,e.byteOffset+1,e.byteLength-1);if(this.awaitingDataResponse&&this.dataResolve&&(this.awaitingDataResponse=!1,this.dataResolve(o)),this.onDataResponse){const c=this.onDataResponse(o);c instanceof Promise&&c.catch(console.error)}}else{const o=new TextDecoder().decode(e);if(this.awaitingPrintResponse&&this.printResolve&&(this.awaitingPrintResponse=!1,this.printResolve(o)),this.onPrintResponse){const c=this.onPrintResponse(o);c instanceof Promise&&c.catch(console.error)}}})}setDataResponseHandler(t){this.onDataResponse=t}setPrintResponseHandler(t){this.onPrintResponse=t}setDisconnectHandler(t){this.onDisconnectHandler=t}async connect(t={}){var o,c,s;if(!navigator.bluetooth)throw new Error("Web Bluetooth API not available.");const e={filters:[t.name?{services:[this.SERVICE_UUID],name:t.name}:t.namePrefix?{services:[this.SERVICE_UUID],namePrefix:t.namePrefix}:{services:[this.SERVICE_UUID]}],optionalServices:[this.SERVICE_UUID]};try{if(this.device=await navigator.bluetooth.requestDevice(e),!this.device)throw new Error("No device selected or found.");this.device.addEventListener("gattserverdisconnected",this.handleDisconnect),this.server=await this.device.gatt.connect();const a=await this.server.getPrimaryService(this.SERVICE_UUID);this.txCharacteristic=await a.getCharacteristic(this.TX_CHARACTERISTIC_UUID),this.rxCharacteristic=await a.getCharacteristic(this.RX_CHARACTERISTIC_UUID),await this.rxCharacteristic.startNotifications(),this.rxCharacteristic.addEventListener("characteristicvaluechanged",this.notificationHandler),await this.sendBreakSignal(!1);const r=await this.sendLua("print(frame.bluetooth.max_length())",{awaitPrint:!0});if(r==null)throw new Error("Failed to get MTU size from device.");{const h=parseInt(r);if(isNaN(h)||h<=0)throw new Error(`Invalid MTU size received: '${r}'`);this.maxPayload=h}return this.device.id||this.device.name||"Unknown Device"}catch(a){if(console.error("Connection failed:",a),this.device&&(this.device.removeEventListener("gattserverdisconnected",this.handleDisconnect),(o=this.device.gatt)!=null&&o.connected&&this.device.gatt.disconnect()),this.rxCharacteristic){try{(s=(c=this.device)==null?void 0:c.gatt)!=null&&s.connected&&await this.rxCharacteristic.stopNotifications()}catch{}this.rxCharacteristic.removeEventListener("characteristicvaluechanged",this.notificationHandler)}throw this.device=void 0,this.server=void 0,this.txCharacteristic=void 0,this.rxCharacteristic=void 0,a}}async disconnect(){var t;this.device&&((t=this.device.gatt)!=null&&t.connected)?this.device.gatt.disconnect():this.handleDisconnect()}isConnected(){return!!(this.device&&this.device.gatt&&this.device.gatt.connected)}getMaxPayload(t){return t?this.maxPayload:this.maxPayload-1}async transmit(t,i=!1){if(!this.txCharacteristic)throw new Error("Not connected or TX characteristic not available.");if(t.byteLength>this.maxPayload)throw new Error(`Payload length: ${t.byteLength} exceeds maximum BLE packet size: ${this.maxPayload}`);i&&console.log("Transmitting (hex):",Array.from(t).map(e=>e.toString(16).padStart(2,"0")).join(" ")),await this.txCharacteristic.writeValueWithResponse(t)}async sendLua(t,i={}){const{showMe:e=!1,awaitPrint:o=!1,timeout:c=5e3}=i,s=new TextEncoder().encode(t);if(s.byteLength>this.getMaxPayload(!0))throw new Error(`Lua string payload (${s.byteLength} bytes) is too large for max Lua payload (${this.getMaxPayload(!0)} bytes).`);if(o&&(this.printTimeoutId&&clearTimeout(this.printTimeoutId),this.awaitingPrintResponse=!0,this.printResponsePromise=new Promise((a,r)=>{this.printResolve=a,this.printTimeoutId=setTimeout(()=>{this.awaitingPrintResponse&&(this.awaitingPrintResponse=!1,this.printResolve=void 0,r(new Error(`Device didn't respond with a print within ${c}ms.`)))},c)}).finally(()=>{this.printTimeoutId&&(clearTimeout(this.printTimeoutId),this.printTimeoutId=void 0)})),await this.transmit(s,e),o)return this.printResponsePromise}async sendData(t,i={}){const{showMe:e=!1,awaitData:o=!1,timeout:c=5e3}=i;if(!this.txCharacteristic)throw new Error("Not connected or TX characteristic not available.");if(t.byteLength>this.getMaxPayload(!1))throw new Error(`Data payload (${t.byteLength} bytes) is too large for max data payload (${this.getMaxPayload(!1)} bytes).`);const s=new Uint8Array([1]),a=new Uint8Array(s.length+t.byteLength);a.set(s,0),a.set(t,s.length);let r;if(o&&(this.awaitingDataResponse=!0,this.dataResponsePromise=new Promise((h,l)=>{this.dataResolve=h,r=setTimeout(()=>{this.awaitingDataResponse&&(this.awaitingDataResponse=!1,this.dataResolve=void 0,l(new Error(`Device didn't respond with data within ${c}ms.`)))},c)}).finally(()=>{r&&clearTimeout(r)})),await this.transmit(a,e),o)return this.dataResponsePromise}async sendResetSignal(t=!1){const i=new Uint8Array([4]);await this.transmit(i,t),await new Promise(e=>setTimeout(e,200))}async sendBreakSignal(t=!1){const i=new Uint8Array([3]);await this.transmit(i,t),await new Promise(e=>setTimeout(e,200))}async uploadFileFromString(t,i="main.lua"){let e=t.replace(/\r/g,"").replace(/\\/g,"\\\\").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/'/g,"\\'").replace(/"/g,'\\"');const o=await this.sendLua(`f=frame.file.open('${i}','w');print(1)`,{awaitPrint:!0});if(o!=="1")throw new Error(`Failed to open file ${i} on device. Response: ${o}`);const s=this.getMaxPayload(!0)-20;if(s<=0)throw new Error("Max payload size too small for file upload operations.");let a=0;for(;a<e.length;){let r=Math.min(s,e.length-a),h=e.substring(a,a+r);for(;h.endsWith("\\");){let f=0;for(let d=h.length-1;d>=0&&h[d]==="\\";d--)f++;if(f%2!==0)if(r>1)r--,h=e.substring(a,a+r);else throw await this.sendLua("f:close();print(nil)",{awaitPrint:!0}),new Error("Cannot safely chunk content due to isolated escape character at chunk boundary.");else break}const l=await this.sendLua(`f:write("${h}");print(1)`,{awaitPrint:!0});if(l!=="1")throw await this.sendLua("f:close();print(nil)",{awaitPrint:!0}),new Error(`Failed to write chunk to ${i}. Response: ${l}`);a+=r}await this.sendLua("f:close();print(nil)",{awaitPrint:!0})}async uploadFile(t,i="main.lua"){await this.uploadFileFromString(t,i)}async sendMessage(t,i,e=!1){if(t<0||t>255)throw new Error(`Message code must be 0-255, got ${t}`);const s=i.byteLength;if(s>65535)throw new Error(`Payload size ${s} exceeds maximum 65535 bytes`);const a=this.getMaxPayload(!1),r=a-1-2,h=a-1;if(r<=0||h<=0)throw new Error("Max payload size too small for message sending protocol.");let l=0;const f=Math.min(r,s),d=new Uint8Array(3+f);for(d[0]=t,d[1]=s>>8,d[2]=s&255,d.set(i.subarray(0,f),3),await this.sendData(d,{showMe:e,awaitData:!0}),l+=f;l<s;){const g=s-l,u=Math.min(h,g),p=new Uint8Array(1+u);p[0]=t,p.set(i.subarray(l,l+u),1),await this.sendData(p,{showMe:e,awaitData:!0}),l+=u}}}export{R as F};
